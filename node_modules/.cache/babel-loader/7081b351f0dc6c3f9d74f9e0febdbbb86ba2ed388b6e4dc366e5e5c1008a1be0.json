{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useAuth } from \"./useAuth\";\nexport const usePlayers = () => {\n  _s();\n  const [players, setPlayers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    token\n  } = useAuth();\n  const fetchPlayers = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/players\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Ошибка при загрузке игроков\");\n      }\n      const data = await response.json();\n      setPlayers(data);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Произошла ошибка\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const addPlayer = async playerData => {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/players\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(playerData)\n      });\n      if (!response.ok) {\n        throw new Error(\"Ошибка при добавлении игрока\");\n      }\n      const newPlayer = await response.json();\n      setPlayers(prev => [...prev, newPlayer]);\n      return newPlayer;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Произошла ошибка\");\n      throw err;\n    }\n  };\n  useEffect(() => {\n    fetchPlayers();\n  }, [token]);\n  return {\n    players,\n    loading,\n    error,\n    addPlayer,\n    refreshPlayers: fetchPlayers\n  };\n};\n_s(usePlayers, \"l1cNmMl3ZhLQoBJFcp4m+vPqpgU=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useState","useEffect","useAuth","usePlayers","_s","players","setPlayers","loading","setLoading","error","setError","token","fetchPlayers","response","fetch","headers","Authorization","ok","Error","data","json","err","message","addPlayer","playerData","method","body","JSON","stringify","newPlayer","prev","refreshPlayers"],"sources":["C:/Users/zelud/OneDrive/Desktop/str8/analiticsstr8/src/hooks/usePlayers.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Player } from \"../types\";\r\nimport { useAuth } from \"./useAuth\";\r\n\r\nexport const usePlayers = () => {\r\n  const [players, setPlayers] = useState<Player[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { token } = useAuth();\r\n\r\n  const fetchPlayers = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/players\", {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Ошибка при загрузке игроков\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      setPlayers(data);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : \"Произошла ошибка\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const addPlayer = async (\r\n    playerData: Omit<Player, \"id\" | \"matches\" | \"stats\">\r\n  ) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/players\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(playerData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Ошибка при добавлении игрока\");\r\n      }\r\n\r\n      const newPlayer = await response.json();\r\n      setPlayers((prev) => [...prev, newPlayer]);\r\n      return newPlayer;\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : \"Произошла ошибка\");\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPlayers();\r\n  }, [token]);\r\n\r\n  return {\r\n    players,\r\n    loading,\r\n    error,\r\n    addPlayer,\r\n    refreshPlayers: fetchPlayers,\r\n  };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,OAAO,QAAQ,WAAW;AAEnC,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAW,EAAE,CAAC;EACpD,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM;IAAEW;EAAM,CAAC,GAAGT,OAAO,CAAC,CAAC;EAE3B,MAAMU,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;QAChEC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUL,KAAK;QAChC;MACF,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCd,UAAU,CAACa,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZX,QAAQ,CAACW,GAAG,YAAYH,KAAK,GAAGG,GAAG,CAACC,OAAO,GAAG,kBAAkB,CAAC;IACnE,CAAC,SAAS;MACRd,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMe,SAAS,GAAG,MAChBC,UAAoD,IACjD;IACH,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;QAChEW,MAAM,EAAE,MAAM;QACdV,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,UAAUL,KAAK;QAChC,CAAC;QACDe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,UAAU;MACjC,CAAC,CAAC;MAEF,IAAI,CAACX,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACjD;MAEA,MAAMW,SAAS,GAAG,MAAMhB,QAAQ,CAACO,IAAI,CAAC,CAAC;MACvCd,UAAU,CAAEwB,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAED,SAAS,CAAC,CAAC;MAC1C,OAAOA,SAAS;IAClB,CAAC,CAAC,OAAOR,GAAG,EAAE;MACZX,QAAQ,CAACW,GAAG,YAAYH,KAAK,GAAGG,GAAG,CAACC,OAAO,GAAG,kBAAkB,CAAC;MACjE,MAAMD,GAAG;IACX;EACF,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACdW,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACD,KAAK,CAAC,CAAC;EAEX,OAAO;IACLN,OAAO;IACPE,OAAO;IACPE,KAAK;IACLc,SAAS;IACTQ,cAAc,EAAEnB;EAClB,CAAC;AACH,CAAC;AAACR,EAAA,CAhEWD,UAAU;EAAA,QAIHD,OAAO;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}