{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useAuth } from \"./useAuth\";\nconst API_URL = process.env.REACT_APP_API_URL || \"https://str8-server.onrender.com\";\nexport const usePlayers = () => {\n  _s();\n  const [players, setPlayers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    token\n  } = useAuth();\n  const fetchPlayers = useCallback(async () => {\n    if (!token) {\n      setError(\"Требуется авторизация\");\n      setLoading(false);\n      return;\n    }\n    try {\n      const response = await fetch(`${API_URL}/api/players`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Ошибка при загрузке игроков\");\n      }\n      const data = await response.json();\n      setPlayers(data);\n      setError(null);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Произошла ошибка\");\n    } finally {\n      setLoading(false);\n    }\n  }, [token]);\n  const addPlayer = async playerData => {\n    if (!token) {\n      throw new Error(\"Требуется авторизация\");\n    }\n    try {\n      const response = await fetch(`${API_URL}/api/players`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(playerData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Ошибка при добавлении игрока\");\n      }\n      const newPlayer = await response.json();\n      setPlayers(prev => [...prev, newPlayer]);\n      setError(null);\n      return newPlayer;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Произошла ошибка\";\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n  useEffect(() => {\n    if (token) {\n      fetchPlayers();\n    }\n  }, [token, fetchPlayers]);\n  return {\n    players,\n    loading,\n    error,\n    addPlayer,\n    refreshPlayers: fetchPlayers\n  };\n};\n_s(usePlayers, \"iKKOeZEM7KZVBiFOuxoY9Tp5rfg=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","useAuth","API_URL","process","env","REACT_APP_API_URL","usePlayers","_s","players","setPlayers","loading","setLoading","error","setError","token","fetchPlayers","response","fetch","headers","Authorization","ok","errorData","json","Error","message","data","err","addPlayer","playerData","method","body","JSON","stringify","newPlayer","prev","errorMessage","refreshPlayers"],"sources":["C:/Users/zelud/OneDrive/Desktop/str8/analiticsstr8/src/hooks/usePlayers.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\nimport { Player } from \"../types\";\r\nimport { useAuth } from \"./useAuth\";\r\n\r\nconst API_URL =\r\n  process.env.REACT_APP_API_URL || \"https://str8-server.onrender.com\";\r\n\r\nexport const usePlayers = () => {\r\n  const [players, setPlayers] = useState<Player[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { token } = useAuth();\r\n\r\n  const fetchPlayers = useCallback(async () => {\r\n    if (!token) {\r\n      setError(\"Требуется авторизация\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${API_URL}/api/players`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || \"Ошибка при загрузке игроков\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      setPlayers(data);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : \"Произошла ошибка\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [token]);\r\n\r\n  const addPlayer = async (\r\n    playerData: Omit<Player, \"id\" | \"matches\" | \"stats\">\r\n  ) => {\r\n    if (!token) {\r\n      throw new Error(\"Требуется авторизация\");\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${API_URL}/api/players`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(playerData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || \"Ошибка при добавлении игрока\");\r\n      }\r\n\r\n      const newPlayer = await response.json();\r\n      setPlayers((prev) => [...prev, newPlayer]);\r\n      setError(null);\r\n      return newPlayer;\r\n    } catch (err) {\r\n      const errorMessage =\r\n        err instanceof Error ? err.message : \"Произошла ошибка\";\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      fetchPlayers();\r\n    }\r\n  }, [token, fetchPlayers]);\r\n\r\n  return {\r\n    players,\r\n    loading,\r\n    error,\r\n    addPlayer,\r\n    refreshPlayers: fetchPlayers,\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}